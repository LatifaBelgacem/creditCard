{"version":3,"sources":["components/creditcard.js","App.js","serviceWorker.js","index.js"],"names":["Creditcard","className","src","alt","width","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6NA8CeA,G,uLAzCP,OACI,6BACI,yBAAKC,UAAU,eACZ,yBAAKA,UAAU,kBAAf,IAAiC,wBAAIA,UAAU,qBAAd,gBAChC,yBAAKA,UAAU,oBACX,yBAAKC,IAAI,2GAA2GC,IAAI,SAASC,MAAM,UAK3I,yBAAKH,UAAU,uBACX,yBAAKA,UAAU,oBACX,wBAAIA,UAAU,sBAAd,uBAEA,yBAAKA,UAAU,0BACX,wBAAIA,UAAU,6BAAd,QACA,yBAAKA,UAAU,oBACX,uBAAGA,UAAU,oBAAb,cACA,yBAAKA,UAAU,wBACX,uBAAGA,UAAU,qBAAb,cACA,wBAAIA,UAAU,oBAAd,YAIZ,wBAAIA,UAAU,sBAAd,eAKJ,yBAAKA,UAAU,oBACX,yBAAKC,IAAI,wFAAwFC,IAAI,wB,GAhCxGE,cCMVC,MANf,WACE,OACE,kBAAC,EAAD,OCOgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.29e3b5ce.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './creditcard.css'\r\n\r\nclass Creditcard extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"credit-card\">\r\n                   <div className=\"title-position\"> <h1 className=\"credit-card-title\">CREDIT CARD</h1></div>\r\n                    <div className=\"credit-card-chip\">\r\n                        <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSHzZAtgq1ysgXf_DOI2b9VIdMHvFSGc2wyYDt88DyJO06DwI7r\" alt=\"credit\" width=\"100%\"></img>\r\n                    </div>\r\n\r\n\r\n\r\n                    <div className=\"credit-card-content\">\r\n                        <div className=\"credit-card-text\">\r\n                            <h2 className=\"credit-card-number\">7253 3256 7895 1245</h2>\r\n\r\n                            <div className=\"credit-card-valid-thru\">\r\n                                <h2 className=\"credit-card-second-number\">5422</h2>\r\n                                <div className=\"credit-card-date\">\r\n                                    <p className=\"credit-card-thru\">valid thru</p>\r\n                                    <div className=\"credit-card-validite\">\r\n                                        <p className=\"credit-card-month\">month/year</p>\r\n                                        <h2 className=\"credit-card-year\">11/50</h2>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <h5 className=\"credit-card-holder\">CARDHOLDER</h5>\r\n                        </div>\r\n\r\n\r\n\r\n                        <div className=\"credit-card-logo\">\r\n                            <img src=\"https://q7h8y4i2.stackpathcdn.com/wp-content/uploads/2013/12/visa-mastercard-logo.jpg\" alt=\"credit-card\"></img>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Creditcard;","import React from 'react';\nimport Creditcard from './components/creditcard.js';\n\nfunction App() {\n  return (\n    <Creditcard />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}